module SimplePDL2PetriNet;
create OUT: petrinet from  IN: simplepdl;

-- TODO : nom des petrielements à ajouter ! (OCL)

-- Obtenir le processus qui contient ce process element.
-- Remarque: Ce helper ne serait pas utile si une r�f�rence opposite
-- avait �t� plac�e entre Process et ProcessElement
helper context simplepdl!ProcessElement 
def: getProcess(): simplepdl!Process =
	simplepdl!Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first();

-- Traduire un Process en un PetriNet de m�me nom
rule Process2PetriNet {
	from p: simplepdl!Process
	to pn: petrinet!PetriNetwork (name <- p.name) 
	
	do { pn.petrielement <- petrinet!Arc.allInstances()
		->union(petrinet!Place.allInstances())
		->union(petrinet!Transition.allInstances());
	}
}

-- Traduire une WorkDefinition en un motif sur le r�seau de Petri
rule WorkDefinition2PetriNet {
	from wd: simplepdl!WorkDefinition
	to
		-- PLACES d'une WorkDefinition
		p_ready: petrinet!Place(
				name <- wd.name + '_ready',
				nbJetons <- 1),
				--net <- wd.getProcess()),
		p_running: petrinet!Place(
				name <- wd.name + '_running',
				nbJetons <- 0),
				--net <- wd.getProcess()),
		p_started: petrinet!Place(
				name <- wd.name + '_started',
				nbJetons <- 0),
				--net <- wd.getProcess()),
		p_finished: petrinet!Place(
				name <- wd.name + '_finished',
				nbJetons <- 0),
				--net <- wd.getProcess()),
				
		t_starts: petrinet!Transition(
				name <- wd.name + '_starts'),
				--net <- wd.getProcess()),
		t_finishes: petrinet!Transition(
				name <- wd.name + '_finishes'),
				--net <- wd.getProcess()),
				
		a_ready2starts: petrinet!Arc(
				place <- p_ready,
				transition <- t_starts,
				Direction <- #P2T,
				jetonsTransferes <- 1),
				--net <- wd.getProcess()),
		a_starts2started: petrinet!Arc(
				transition <- t_starts,
				place <- p_started,
				Direction <- #T2P,
				jetonsTransferes <- 1),
				--net <- wd.getProcess()),
		a_starts2running: petrinet!Arc(
				transition <- t_starts,
				place <- p_running,
				Direction <- #T2P,
				jetonsTransferes <- 1),
				--net <- wd.getProcess()),
		a_running2finishes: petrinet!Arc(
				place <- p_running,
				transition <- t_finishes,
				Direction <- #P2T,
				jetonsTransferes <- 1),
				--net <- wd.getProcess()),
		a_finishes2finished: petrinet!Arc(
				transition <- t_finishes,
				place <- p_finished,
				Direction <- #T2P,
				jetonsTransferes <- 1)
				--net <- wd.getProcess())
}

-- Traduire une WorkSequence en un motif sur le r�seau de Petri
rule WorkSequence2PetriNetS2S {
	from ws: simplepdl!WorkSequence
	-- si le type de lien est s2s
	(ws.linkType = #startToStart)
	to
		a_s2s: petrinet!Arc(
			place <- thisModule.resolveTemp(ws.predecessor, 'p_started'),
			transition <- thisModule.resolveTemp(ws.successor, 't_starts'),
			Direction <- #P2T,
			jetonsTransferes <- 1),
		a_s2sBack: petrinet!Arc(
			place <- thisModule.resolveTemp(ws.predecessor, 'p_started'),
			transition <- thisModule.resolveTemp(ws.successor, 't_starts'),
			Direction <- #T2P,
			jetonsTransferes <- 1)
}
rule WorkSequence2PetriNetF2S {
	from ws: simplepdl!WorkSequence
	-- si le type de lien est f2s
	(ws.linkType = #finishToStart)
	to		
		a_f2s: petrinet!Arc(
			place <- thisModule.resolveTemp(ws.predecessor, 'p_finished'),
			transition <- thisModule.resolveTemp(ws.successor, 't_starts'),
			Direction <- #P2T,
			jetonsTransferes <- 1),
		a_f2sBack: petrinet!Arc(
			place <- thisModule.resolveTemp(ws.predecessor, 'p_finished'),
			transition <- thisModule.resolveTemp(ws.successor, 't_starts'),
			Direction <- #T2P,
			jetonsTransferes <- 1)			
}
rule WorkSequence2PetriNetS2F {
	from ws: simplepdl!WorkSequence
	-- si le type de lien est s2f
	(ws.linkType = #startToFinish)
	to	
		a_s2f: petrinet!Arc(
			place <- thisModule.resolveTemp(ws.predecessor, 'p_started'),
			transition <- thisModule.resolveTemp(ws.successor, 't_finishes'),
			Direction <- #P2T,
			jetonsTransferes <- 1),
		a_s2fBack: petrinet!Arc(
			place <- thisModule.resolveTemp(ws.predecessor, 'p_started'),
			transition <- thisModule.resolveTemp(ws.successor, 't_finishes'),
			Direction <- #T2P,
			jetonsTransferes <- 1)
}
rule WorkSequence2PetriNetF2F {
	from ws: simplepdl!WorkSequence
	-- si le type de lien est f2f
	(ws.linkType = #finishToFinish)
	to			
		a_f2f: petrinet!Arc(
			place <- thisModule.resolveTemp(ws.predecessor, 'p_finished'),
			transition <- thisModule.resolveTemp(ws.successor, 't_finishes'),
			Direction <- #P2T,
			jetonsTransferes <- 1),
		a_f2fBack: petrinet!Arc(
			place <- thisModule.resolveTemp(ws.predecessor, 'p_finished'),
			transition <- thisModule.resolveTemp(ws.successor, 't_finishes'),
			Direction <- #T2P,
			jetonsTransferes <- 1)
}

-- On gère les ressources
rule Resource2PetriNet {
	from rsc: simplepdl!Resources
	to	
		p_rsc: petrinet!Place(
			name <- rsc.name + '_stock',
			nbJetons <- rsc.quantite)
}

-- On gère les requetes de ressources
rule RequeteDeRessource2PetriNet {
	from req_rsc: simplepdl!RequeteDeRessource
	to
		a_demande_rsc: petrinet!Arc(
			place <- thisModule.resolveTemp(req_rsc.resources, 'p_rsc'),
			transition <- thisModule.resolveTemp(req_rsc.workdefinition, 't_starts'),
			Direction <- #P2T,
			jetonsTransferes <- req_rsc.quantite),
			
		a_rendre_rsc: petrinet!Arc(
			place <- thisModule.resolveTemp(req_rsc.resources, 'p_rsc'),
			transition <- thisModule.resolveTemp(req_rsc.workdefinition, 't_finishes'),
			Direction <- #T2P,
			jetonsTransferes <- req_rsc.quantite)
}


