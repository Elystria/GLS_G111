/*
 * generated by Xtext 2.12.0
 */
package fr.n7.simplepdl.txt.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PDLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProcessKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cProcessElementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cProcessElementsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cProcessElementsProcessElementParserRuleCall_4_2_0 = (RuleCall)cProcessElementsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cProcessElementsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cProcessElementsProcessElementParserRuleCall_4_3_1_0 = (RuleCall)cProcessElementsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Process:
		//	{Process}
		//	'Process'
		//	name=EString
		//	'{' ('processElements' '{' processElements+=ProcessElement ("," processElements+=ProcessElement)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Process} 'Process' name=EString '{' ('processElements' '{' processElements+=ProcessElement (","
		//processElements+=ProcessElement)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{Process}
		public Action getProcessAction_0() { return cProcessAction_0; }
		
		//'Process'
		public Keyword getProcessKeyword_1() { return cProcessKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('processElements' '{' processElements+=ProcessElement ("," processElements+=ProcessElement)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'processElements'
		public Keyword getProcessElementsKeyword_4_0() { return cProcessElementsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//processElements+=ProcessElement
		public Assignment getProcessElementsAssignment_4_2() { return cProcessElementsAssignment_4_2; }
		
		//ProcessElement
		public RuleCall getProcessElementsProcessElementParserRuleCall_4_2_0() { return cProcessElementsProcessElementParserRuleCall_4_2_0; }
		
		//("," processElements+=ProcessElement)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//processElements+=ProcessElement
		public Assignment getProcessElementsAssignment_4_3_1() { return cProcessElementsAssignment_4_3_1; }
		
		//ProcessElement
		public RuleCall getProcessElementsProcessElementParserRuleCall_4_3_1_0() { return cProcessElementsProcessElementParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ProcessElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.ProcessElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWorkDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWorkSequenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGuidanceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cResourcesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRequeteDeRessourceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGuidanceLinkParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ProcessElement:
		//	WorkDefinition | WorkSequence | Guidance | Resources | RequeteDeRessource | GuidanceLink;
		@Override public ParserRule getRule() { return rule; }
		
		//WorkDefinition | WorkSequence | Guidance | Resources | RequeteDeRessource | GuidanceLink
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WorkDefinition
		public RuleCall getWorkDefinitionParserRuleCall_0() { return cWorkDefinitionParserRuleCall_0; }
		
		//WorkSequence
		public RuleCall getWorkSequenceParserRuleCall_1() { return cWorkSequenceParserRuleCall_1; }
		
		//Guidance
		public RuleCall getGuidanceParserRuleCall_2() { return cGuidanceParserRuleCall_2; }
		
		//Resources
		public RuleCall getResourcesParserRuleCall_3() { return cResourcesParserRuleCall_3; }
		
		//RequeteDeRessource
		public RuleCall getRequeteDeRessourceParserRuleCall_4() { return cRequeteDeRessourceParserRuleCall_4; }
		
		//GuidanceLink
		public RuleCall getGuidanceLinkParserRuleCall_5() { return cGuidanceLinkParserRuleCall_5; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class WorkDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.WorkDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWorkDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//WorkDefinition:
		//	{WorkDefinition}
		//	'wd' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{WorkDefinition} 'wd' name=ID
		public Group getGroup() { return cGroup; }
		
		//{WorkDefinition}
		public Action getWorkDefinitionAction_0() { return cWorkDefinitionAction_0; }
		
		//'wd'
		public Keyword getWdKeyword_1() { return cWdKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class WorkSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.WorkSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinkTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkTypeWorkSequenceTypeEnumRuleCall_1_0 = (RuleCall)cLinkTypeAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredecessorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPredecessorWorkDefinitionCrossReference_3_0 = (CrossReference)cPredecessorAssignment_3.eContents().get(0);
		private final RuleCall cPredecessorWorkDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cPredecessorWorkDefinitionCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSuccessorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSuccessorWorkDefinitionCrossReference_5_0 = (CrossReference)cSuccessorAssignment_5.eContents().get(0);
		private final RuleCall cSuccessorWorkDefinitionIDTerminalRuleCall_5_0_1 = (RuleCall)cSuccessorWorkDefinitionCrossReference_5_0.eContents().get(1);
		
		//WorkSequence:
		//	'ws' linkType=WorkSequenceType
		//	'from' predecessor=[WorkDefinition]
		//	'to' successor=[WorkDefinition];
		@Override public ParserRule getRule() { return rule; }
		
		//'ws' linkType=WorkSequenceType 'from' predecessor=[WorkDefinition] 'to' successor=[WorkDefinition]
		public Group getGroup() { return cGroup; }
		
		//'ws'
		public Keyword getWsKeyword_0() { return cWsKeyword_0; }
		
		//linkType=WorkSequenceType
		public Assignment getLinkTypeAssignment_1() { return cLinkTypeAssignment_1; }
		
		//WorkSequenceType
		public RuleCall getLinkTypeWorkSequenceTypeEnumRuleCall_1_0() { return cLinkTypeWorkSequenceTypeEnumRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//predecessor=[WorkDefinition]
		public Assignment getPredecessorAssignment_3() { return cPredecessorAssignment_3; }
		
		//[WorkDefinition]
		public CrossReference getPredecessorWorkDefinitionCrossReference_3_0() { return cPredecessorWorkDefinitionCrossReference_3_0; }
		
		//ID
		public RuleCall getPredecessorWorkDefinitionIDTerminalRuleCall_3_0_1() { return cPredecessorWorkDefinitionIDTerminalRuleCall_3_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//successor=[WorkDefinition]
		public Assignment getSuccessorAssignment_5() { return cSuccessorAssignment_5; }
		
		//[WorkDefinition]
		public CrossReference getSuccessorWorkDefinitionCrossReference_5_0() { return cSuccessorWorkDefinitionCrossReference_5_0; }
		
		//ID
		public RuleCall getSuccessorWorkDefinitionIDTerminalRuleCall_5_0_1() { return cSuccessorWorkDefinitionIDTerminalRuleCall_5_0_1; }
	}
	public class GuidanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.Guidance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextEStringParserRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Guidance:
		//	'note' text=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'note' text=EString
		public Group getGroup() { return cGroup; }
		
		//'note'
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }
		
		//text=EString
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//EString
		public RuleCall getTextEStringParserRuleCall_1_0() { return cTextEStringParserRuleCall_1_0; }
	}
	public class ResourcesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.Resources");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRscKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cQuantityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQuantiteAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuantiteEIntParserRuleCall_3_0 = (RuleCall)cQuantiteAssignment_3.eContents().get(0);
		
		//Resources:
		//	'rsc' name=EString
		//	'quantity' quantite=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//'rsc' name=EString 'quantity' quantite=EInt
		public Group getGroup() { return cGroup; }
		
		//'rsc'
		public Keyword getRscKeyword_0() { return cRscKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'quantity'
		public Keyword getQuantityKeyword_2() { return cQuantityKeyword_2; }
		
		//quantite=EInt
		public Assignment getQuantiteAssignment_3() { return cQuantiteAssignment_3; }
		
		//EInt
		public RuleCall getQuantiteEIntParserRuleCall_3_0() { return cQuantiteEIntParserRuleCall_3_0; }
	}
	public class RequeteDeRessourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.RequeteDeRessource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRsc_requestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cQuantityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQuantiteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuantiteEIntParserRuleCall_2_0 = (RuleCall)cQuantiteAssignment_2.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cResourcesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cResourcesResourcesCrossReference_4_0 = (CrossReference)cResourcesAssignment_4.eContents().get(0);
		private final RuleCall cResourcesResourcesIDTerminalRuleCall_4_0_1 = (RuleCall)cResourcesResourcesCrossReference_4_0.eContents().get(1);
		private final Keyword cForKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cWorkdefinitionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cWorkdefinitionWorkDefinitionCrossReference_6_0 = (CrossReference)cWorkdefinitionAssignment_6.eContents().get(0);
		private final RuleCall cWorkdefinitionWorkDefinitionIDTerminalRuleCall_6_0_1 = (RuleCall)cWorkdefinitionWorkDefinitionCrossReference_6_0.eContents().get(1);
		
		//RequeteDeRessource:
		//	'rsc_request'
		//	'quantity' quantite=EInt
		//	'from' resources=[Resources]
		//	'for' workdefinition=[WorkDefinition];
		@Override public ParserRule getRule() { return rule; }
		
		//'rsc_request' 'quantity' quantite=EInt 'from' resources=[Resources] 'for' workdefinition=[WorkDefinition]
		public Group getGroup() { return cGroup; }
		
		//'rsc_request'
		public Keyword getRsc_requestKeyword_0() { return cRsc_requestKeyword_0; }
		
		//'quantity'
		public Keyword getQuantityKeyword_1() { return cQuantityKeyword_1; }
		
		//quantite=EInt
		public Assignment getQuantiteAssignment_2() { return cQuantiteAssignment_2; }
		
		//EInt
		public RuleCall getQuantiteEIntParserRuleCall_2_0() { return cQuantiteEIntParserRuleCall_2_0; }
		
		//'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//resources=[Resources]
		public Assignment getResourcesAssignment_4() { return cResourcesAssignment_4; }
		
		//[Resources]
		public CrossReference getResourcesResourcesCrossReference_4_0() { return cResourcesResourcesCrossReference_4_0; }
		
		//ID
		public RuleCall getResourcesResourcesIDTerminalRuleCall_4_0_1() { return cResourcesResourcesIDTerminalRuleCall_4_0_1; }
		
		//'for'
		public Keyword getForKeyword_5() { return cForKeyword_5; }
		
		//workdefinition=[WorkDefinition]
		public Assignment getWorkdefinitionAssignment_6() { return cWorkdefinitionAssignment_6; }
		
		//[WorkDefinition]
		public CrossReference getWorkdefinitionWorkDefinitionCrossReference_6_0() { return cWorkdefinitionWorkDefinitionCrossReference_6_0; }
		
		//ID
		public RuleCall getWorkdefinitionWorkDefinitionIDTerminalRuleCall_6_0_1() { return cWorkdefinitionWorkDefinitionIDTerminalRuleCall_6_0_1; }
	}
	public class GuidanceLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.GuidanceLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNoteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGuidanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cGuidanceGuidanceCrossReference_2_0 = (CrossReference)cGuidanceAssignment_2.eContents().get(0);
		private final RuleCall cGuidanceGuidanceEStringParserRuleCall_2_0_1 = (RuleCall)cGuidanceGuidanceCrossReference_2_0.eContents().get(1);
		private final Keyword cDocumentsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWorkdefinitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cWorkdefinitionWorkDefinitionCrossReference_4_0 = (CrossReference)cWorkdefinitionAssignment_4.eContents().get(0);
		private final RuleCall cWorkdefinitionWorkDefinitionEStringParserRuleCall_4_0_1 = (RuleCall)cWorkdefinitionWorkDefinitionCrossReference_4_0.eContents().get(1);
		
		//GuidanceLink:
		//	'ref'
		//	'note' guidance=[Guidance|EString]
		//	'documents' workdefinition=[WorkDefinition|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'ref' 'note' guidance=[Guidance|EString] 'documents' workdefinition=[WorkDefinition|EString]
		public Group getGroup() { return cGroup; }
		
		//'ref'
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }
		
		//'note'
		public Keyword getNoteKeyword_1() { return cNoteKeyword_1; }
		
		//guidance=[Guidance|EString]
		public Assignment getGuidanceAssignment_2() { return cGuidanceAssignment_2; }
		
		//[Guidance|EString]
		public CrossReference getGuidanceGuidanceCrossReference_2_0() { return cGuidanceGuidanceCrossReference_2_0; }
		
		//EString
		public RuleCall getGuidanceGuidanceEStringParserRuleCall_2_0_1() { return cGuidanceGuidanceEStringParserRuleCall_2_0_1; }
		
		//'documents'
		public Keyword getDocumentsKeyword_3() { return cDocumentsKeyword_3; }
		
		//workdefinition=[WorkDefinition|EString]
		public Assignment getWorkdefinitionAssignment_4() { return cWorkdefinitionAssignment_4; }
		
		//[WorkDefinition|EString]
		public CrossReference getWorkdefinitionWorkDefinitionCrossReference_4_0() { return cWorkdefinitionWorkDefinitionCrossReference_4_0; }
		
		//EString
		public RuleCall getWorkdefinitionWorkDefinitionEStringParserRuleCall_4_0_1() { return cWorkdefinitionWorkDefinitionEStringParserRuleCall_4_0_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	public class WorkSequenceTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.WorkSequenceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStartToStartEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStartToStartS2sKeyword_0_0 = (Keyword)cStartToStartEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFinishToStartEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFinishToStartF2sKeyword_1_0 = (Keyword)cFinishToStartEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStartToFinishEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStartToFinishS2fKeyword_2_0 = (Keyword)cStartToFinishEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFinishToFinishEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFinishToFinishF2fKeyword_3_0 = (Keyword)cFinishToFinishEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum WorkSequenceType:
		//	startToStart='s2s' | finishToStart='f2s' | startToFinish='s2f' | finishToFinish='f2f';
		public EnumRule getRule() { return rule; }
		
		//startToStart='s2s' | finishToStart='f2s' | startToFinish='s2f' | finishToFinish='f2f'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//startToStart='s2s'
		public EnumLiteralDeclaration getStartToStartEnumLiteralDeclaration_0() { return cStartToStartEnumLiteralDeclaration_0; }
		
		//'s2s'
		public Keyword getStartToStartS2sKeyword_0_0() { return cStartToStartS2sKeyword_0_0; }
		
		//finishToStart='f2s'
		public EnumLiteralDeclaration getFinishToStartEnumLiteralDeclaration_1() { return cFinishToStartEnumLiteralDeclaration_1; }
		
		//'f2s'
		public Keyword getFinishToStartF2sKeyword_1_0() { return cFinishToStartF2sKeyword_1_0; }
		
		//startToFinish='s2f'
		public EnumLiteralDeclaration getStartToFinishEnumLiteralDeclaration_2() { return cStartToFinishEnumLiteralDeclaration_2; }
		
		//'s2f'
		public Keyword getStartToFinishS2fKeyword_2_0() { return cStartToFinishS2fKeyword_2_0; }
		
		//finishToFinish='f2f'
		public EnumLiteralDeclaration getFinishToFinishEnumLiteralDeclaration_3() { return cFinishToFinishEnumLiteralDeclaration_3; }
		
		//'f2f'
		public Keyword getFinishToFinishF2fKeyword_3_0() { return cFinishToFinishF2fKeyword_3_0; }
	}
	
	private final ProcessElements pProcess;
	private final ProcessElementElements pProcessElement;
	private final EStringElements pEString;
	private final WorkDefinitionElements pWorkDefinition;
	private final WorkSequenceElements pWorkSequence;
	private final GuidanceElements pGuidance;
	private final ResourcesElements pResources;
	private final RequeteDeRessourceElements pRequeteDeRessource;
	private final GuidanceLinkElements pGuidanceLink;
	private final WorkSequenceTypeElements eWorkSequenceType;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PDLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProcess = new ProcessElements();
		this.pProcessElement = new ProcessElementElements();
		this.pEString = new EStringElements();
		this.pWorkDefinition = new WorkDefinitionElements();
		this.pWorkSequence = new WorkSequenceElements();
		this.pGuidance = new GuidanceElements();
		this.pResources = new ResourcesElements();
		this.pRequeteDeRessource = new RequeteDeRessourceElements();
		this.pGuidanceLink = new GuidanceLinkElements();
		this.eWorkSequenceType = new WorkSequenceTypeElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.n7.simplepdl.txt.PDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Process:
	//	{Process}
	//	'Process'
	//	name=EString
	//	'{' ('processElements' '{' processElements+=ProcessElement ("," processElements+=ProcessElement)* '}')?
	//	'}';
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//ProcessElement:
	//	WorkDefinition | WorkSequence | Guidance | Resources | RequeteDeRessource | GuidanceLink;
	public ProcessElementElements getProcessElementAccess() {
		return pProcessElement;
	}
	
	public ParserRule getProcessElementRule() {
		return getProcessElementAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//WorkDefinition:
	//	{WorkDefinition}
	//	'wd' name=ID;
	public WorkDefinitionElements getWorkDefinitionAccess() {
		return pWorkDefinition;
	}
	
	public ParserRule getWorkDefinitionRule() {
		return getWorkDefinitionAccess().getRule();
	}
	
	//WorkSequence:
	//	'ws' linkType=WorkSequenceType
	//	'from' predecessor=[WorkDefinition]
	//	'to' successor=[WorkDefinition];
	public WorkSequenceElements getWorkSequenceAccess() {
		return pWorkSequence;
	}
	
	public ParserRule getWorkSequenceRule() {
		return getWorkSequenceAccess().getRule();
	}
	
	//Guidance:
	//	'note' text=EString;
	public GuidanceElements getGuidanceAccess() {
		return pGuidance;
	}
	
	public ParserRule getGuidanceRule() {
		return getGuidanceAccess().getRule();
	}
	
	//Resources:
	//	'rsc' name=EString
	//	'quantity' quantite=EInt;
	public ResourcesElements getResourcesAccess() {
		return pResources;
	}
	
	public ParserRule getResourcesRule() {
		return getResourcesAccess().getRule();
	}
	
	//RequeteDeRessource:
	//	'rsc_request'
	//	'quantity' quantite=EInt
	//	'from' resources=[Resources]
	//	'for' workdefinition=[WorkDefinition];
	public RequeteDeRessourceElements getRequeteDeRessourceAccess() {
		return pRequeteDeRessource;
	}
	
	public ParserRule getRequeteDeRessourceRule() {
		return getRequeteDeRessourceAccess().getRule();
	}
	
	//GuidanceLink:
	//	'ref'
	//	'note' guidance=[Guidance|EString]
	//	'documents' workdefinition=[WorkDefinition|EString];
	public GuidanceLinkElements getGuidanceLinkAccess() {
		return pGuidanceLink;
	}
	
	public ParserRule getGuidanceLinkRule() {
		return getGuidanceLinkAccess().getRule();
	}
	
	//enum WorkSequenceType:
	//	startToStart='s2s' | finishToStart='f2s' | startToFinish='s2f' | finishToFinish='f2f';
	public WorkSequenceTypeElements getWorkSequenceTypeAccess() {
		return eWorkSequenceType;
	}
	
	public EnumRule getWorkSequenceTypeRule() {
		return getWorkSequenceTypeAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
